const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
let sessionCookie = '';
let testUserId = '';

async function loginAsAdmin() {
    try {
        console.log('üîê ƒêƒÉng nh·∫≠p admin...');
        const response = await axios.post(`${BASE_URL}/api/auth/login`, {
            username: 'admin',
            password: 'admin123'
        });
        
        const cookies = response.headers['set-cookie'];
        if (cookies) {
            sessionCookie = cookies[0].split(';')[0];
        }
        
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error.response?.data || error.message);
        return false;
    }
}

async function testCalculateSalary() {
    try {
        // First, get users to find a test user
        console.log('\nüë• L·∫•y danh s√°ch users...');
        const usersRes = await axios.get(`${BASE_URL}/api/users`, {
            headers: { 'Cookie': sessionCookie }
        });
        
        if (usersRes.data.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ user n√†o ƒë·ªÉ test');
            return null;
        }
        
        testUserId = usersRes.data[0].id;
        console.log('‚úÖ S·ª≠ d·ª•ng user:', usersRes.data[0].fullname || usersRes.data[0].username);
        
        // Calculate salary
        console.log('\nüßÆ T√≠nh l∆∞∆°ng parttime...');
        const salaryRes = await axios.post(`${BASE_URL}/api/salary/parttime`, {
            user_id: testUserId,
            month: 12,
            year: 2024,
            allowance: 500000,
            bonus: 200000
        }, {
            headers: {
                'Cookie': sessionCookie,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ T√≠nh l∆∞∆°ng th√†nh c√¥ng:', {
            totalDay: salaryRes.data.totalDay,
            totalNight: salaryRes.data.totalNight,
            total: salaryRes.data.total
        });
        
        return salaryRes.data;
    } catch (error) {
        console.error('‚ùå L·ªói t√≠nh l∆∞∆°ng:', error.response?.data || error.message);
        return null;
    }
}

async function testSavePayroll(salaryData) {
    try {
        if (!salaryData) {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu l∆∞∆°ng ƒë·ªÉ l∆∞u');
            return false;
        }
        
        console.log('\nüíæ Test l∆∞u b·∫£ng l∆∞∆°ng...');
        
        const payrollData = {
            user_id: testUserId,
            month: 12,
            year: 2024,
            total_day: salaryData.totalDay || 0,
            total_night: salaryData.totalNight || 0,
            day_shift_rate: salaryData.day_shift_rate || 0,
            night_shift_rate: salaryData.night_shift_rate || 0,
            allowance: salaryData.allowance || 0,
            bonus: salaryData.bonus || 0,
            total: salaryData.total || 0
        };
        
        console.log('D·ªØ li·ªáu l∆∞u b·∫£ng l∆∞∆°ng:', payrollData);
        
        const response = await axios.post(`${BASE_URL}/api/payroll`, payrollData, {
            headers: {
                'Cookie': sessionCookie,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ L∆∞u b·∫£ng l∆∞∆°ng th√†nh c√¥ng:', response.data.message);
        console.log('Payroll ID:', response.data.payroll._id);
        return response.data.payroll._id;
    } catch (error) {
        console.error('‚ùå L·ªói l∆∞u b·∫£ng l∆∞∆°ng:', error.response?.data || error.message);
        
        if (error.response?.data && typeof error.response.data === 'string' && error.response.data.includes('<!DOCTYPE')) {
            console.error('üîç Server tr·∫£ v·ªÅ HTML thay v√¨ JSON');
        }
        
        return false;
    }
}

async function testGetUserPayrolls() {
    try {
        console.log('\nüìã Test l·∫•y b·∫£ng l∆∞∆°ng c·ªßa user...');
        
        const response = await axios.get(`${BASE_URL}/api/payroll/user/${testUserId}`, {
            headers: { 'Cookie': sessionCookie }
        });
        
        console.log('‚úÖ L·∫•y b·∫£ng l∆∞∆°ng th√†nh c√¥ng:', {
            count: response.data.length,
            payrolls: response.data.map(p => ({
                id: p._id,
                month: p.month,
                year: p.year,
                total: p.total
            }))
        });
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y b·∫£ng l∆∞∆°ng:', error.response?.data || error.message);
        return false;
    }
}

async function testGetAllPayrolls() {
    try {
        console.log('\nüìä Test l·∫•y t·∫•t c·∫£ b·∫£ng l∆∞∆°ng...');
        
        const response = await axios.get(`${BASE_URL}/api/payroll`, {
            headers: { 'Cookie': sessionCookie }
        });
        
        console.log('‚úÖ L·∫•y t·∫•t c·∫£ b·∫£ng l∆∞∆°ng th√†nh c√¥ng:', {
            count: response.data.length,
            payrolls: response.data.slice(0, 3).map(p => ({
                id: p._id,
                user: p.user ? p.user.fullname : 'N/A',
                month: p.month,
                year: p.year,
                total: p.total
            }))
        });
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y t·∫•t c·∫£ b·∫£ng l∆∞∆°ng:', error.response?.data || error.message);
        return false;
    }
}

async function runAllTests() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test ch·ª©c nƒÉng b·∫£ng l∆∞∆°ng...\n');
    
    const results = {
        login: false,
        calculateSalary: false,
        savePayroll: false,
        getUserPayrolls: false,
        getAllPayrolls: false
    };
    
    // Login
    results.login = await loginAsAdmin();
    if (!results.login) return results;
    
    // Calculate salary
    const salaryData = await testCalculateSalary();
    results.calculateSalary = !!salaryData;
    
    // Save payroll
    if (results.calculateSalary) {
        const payrollId = await testSavePayroll(salaryData);
        results.savePayroll = !!payrollId;
    }
    
    // Get user payrolls
    results.getUserPayrolls = await testGetUserPayrolls();
    
    // Get all payrolls
    results.getAllPayrolls = await testGetAllPayrolls();
    
    // Summary
    console.log('\nüìä K·∫æT QU·∫¢ TEST B·∫¢NG L∆Ø∆†NG:');
    console.log('============================');
    Object.entries(results).forEach(([test, passed]) => {
        console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test.toUpperCase()}: ${passed ? 'PASS' : 'FAIL'}`);
    });
    
    const passCount = Object.values(results).filter(Boolean).length;
    console.log(`\nüéØ T·ªïng k·∫øt: ${passCount}/${Object.keys(results).length} tests passed`);
    
    if (passCount === Object.keys(results).length) {
        console.log('\nüéâ T·∫§T C·∫¢ CH·ª®C NƒÇNG B·∫¢NG L∆Ø∆†NG HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!');
    } else {
        console.log('\n‚ö†Ô∏è C·∫ßn ki·ªÉm tra v√† s·ª≠a l·ªói b·∫£ng l∆∞∆°ng');
    }
    
    return results;
}

// Run tests
runAllTests().catch(console.error);